{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/arm1.png","path":"images/arm1.png","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/efavicon.ico","path":"assets/efavicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/canvas-nest.js","path":"scripts/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/everydaystruggle.png","path":"avatar/everydaystruggle.png","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/blue_circle_loading.jpg","path":"intro/blue_circle_loading.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg2.jpg","path":"intro/post-bg2.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1546297732000},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1546297732000},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1546297732000},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1546297732000},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1546297732000},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1546297732000},{"_id":"themes/archer/README.md","hash":"e3f0d1666bfb145489200a79c25c0f3fafefbc67","modified":1546297732000},{"_id":"themes/archer/_config.yml","hash":"b7fcddd077989645ac6bddfba9de2941338f2244","modified":1546329092000},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1546297732000},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1546297733000},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1546297733000},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1546297733000},{"_id":"source/_discarded/test.md","hash":"a9f3d9ac7c955da58ac6c7f592322b65f1654efc","modified":1571008985000},{"_id":"source/_posts/ARM内部处理寄存器.md","hash":"1b8f6a521e20b62498c7d5af75a04765d7acc0af","modified":1571010549000},{"_id":"source/_posts/Hello-World.md","hash":"3287e14f3df13489fff60796d9a344039f8b5f77","modified":1546310244000},{"_id":"source/_posts/RK3399内核编译以安装docker.md","hash":"fcd7d30bdb4ceafd6436229713d628c9ff4fb299","modified":1571167355650},{"_id":"source/_posts/Use-GCC-to-build-STM32-projects.md","hash":"b14240f0a201a3d9e192122bbb02c006a6a87efb","modified":1549054963000},{"_id":"source/images/arm1.png","hash":"15ba7a91c62d68f76a07105b01b1b80ce07f26be","modified":1571009170000},{"_id":"themes/archer/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1546297732000},{"_id":"themes/archer/.git/config","hash":"365550109613b44d4f847676158291a7370964b4","modified":1546297732000},{"_id":"themes/archer/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1546297727000},{"_id":"themes/archer/.git/index","hash":"59d9692aa927f6be288e0ad649f9be015c92c69a","modified":1571167413260},{"_id":"themes/archer/.git/packed-refs","hash":"abdf098f2b5024adeca17d68c638a53a6346e04b","modified":1546297732000},{"_id":"themes/archer/.git/shallow","hash":"a348fab820e88d801db0d6877198f89aa953bca0","modified":1546297732000},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1546297732000},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1546297732000},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1546297732000},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1546297732000},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1546297732000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1546297732000},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1546297732000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1546297733000},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1546297733000},{"_id":"themes/archer/layout/layout.ejs","hash":"3f348e08021f34a1dddfd1b1b7d35f2423d39b65","modified":1546326059000},{"_id":"themes/archer/layout/post.ejs","hash":"108efa31b7f1602253cb97682f6e617487d751b0","modified":1546311432000},{"_id":"themes/archer/layout/post.ejs.bak","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1546297733000},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1546297733000},{"_id":"themes/archer/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1546297727000},{"_id":"themes/archer/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1546297727000},{"_id":"themes/archer/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1546297727000},{"_id":"themes/archer/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1546297727000},{"_id":"themes/archer/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1546297727000},{"_id":"themes/archer/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1546297727000},{"_id":"themes/archer/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1546297727000},{"_id":"themes/archer/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1546297727000},{"_id":"themes/archer/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1546297727000},{"_id":"themes/archer/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1546297727000},{"_id":"themes/archer/.git/logs/HEAD","hash":"26ba9d9590906eab85a68b3a70404e4c5e114428","modified":1546297732000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1546297732000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1546297732000},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1546297732000},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1546297732000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1546297732000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1546297733000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1546297733000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1546297733000},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1546297733000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1546297733000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1546297733000},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1546297733000},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1546297733000},{"_id":"themes/archer/source/assets/efavicon.ico","hash":"ca9cb5f11058c4e7aa6bc27095dca5f761448906","modified":1546316134000},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1546297733000},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1546297733000},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1546297733000},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1546297733000},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1546297733000},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1546297733000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1546297733000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1546297733000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"3e80968d6517320a1965deeee8fb514abdf4b227","modified":1571002849000},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1546297733000},{"_id":"themes/archer/source/scripts/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":1546312045000},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1546297733000},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1546297733000},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1546297733000},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1546297733000},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1546297733000},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1546297733000},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1546297733000},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1546297733000},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1546297733000},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1546297733000},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1546297733000},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1546297733000},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1546297733000},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1546297733000},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1546297733000},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1546297733000},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1546297733000},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1546297733000},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1546297733000},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1546297733000},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1546297733000},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1546297733000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546297733000},{"_id":"themes/archer/source/avatar/everydaystruggle.png","hash":"030dc809e10c2c9cacdcd85f2cdc1a83a1bfcd15","modified":1546310482000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1546297733000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1546297733000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1546297733000},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1546297733000},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1546297733000},{"_id":"themes/archer/.git/objects/pack/pack-c9b222372f417a39e98eb78294d9bed8b9ff970c.idx","hash":"b5d1529a5f5466dc664fada2e855f0fdae588f9b","modified":1546297732000},{"_id":"themes/archer/.git/refs/heads/master","hash":"a348fab820e88d801db0d6877198f89aa953bca0","modified":1546297732000},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1546297733000},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1546297733000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1546297733000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1546297733000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1546297733000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1546297733000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1546297733000},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1546297733000},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1546297732000},{"_id":"themes/archer/source/intro/blue_circle_loading.jpg","hash":"d8e989c6a2d6c5e4ddd9ee2351e5987ba3f6973e","modified":1546329059000},{"_id":"themes/archer/.git/logs/refs/heads/master","hash":"26ba9d9590906eab85a68b3a70404e4c5e114428","modified":1546297732000},{"_id":"themes/archer/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1546297732000},{"_id":"themes/archer/source/intro/post-bg2.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1546297733000},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1546297733000},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1546297733000},{"_id":"themes/archer/.git/logs/refs/remotes/origin/HEAD","hash":"26ba9d9590906eab85a68b3a70404e4c5e114428","modified":1546297732000},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1546297733000},{"_id":"themes/archer/.git/objects/pack/pack-c9b222372f417a39e98eb78294d9bed8b9ff970c.pack","hash":"f2c3dafff2294ec0dbeb453c5b31101c92286be7","modified":1546297732000}],"Category":[{"name":"ARM_Linux","_id":"ck1s8spnk0003h9m086l5688u"}],"Data":[],"Page":[],"Post":[{"title":"ARM处理器内部寄存器","date":"2019-10-13T23:26:11.000Z","author":null,"_content":"\nARM处理器内部寄存器作用\n===\n\n![](/images/arm1.png)\n\n\n***\n\nr0-r15 and R0-R15  \na1-a4 (argument, result, or scratch registers, synonyms for r0 to r3)  \nv1-v8 (variable registers, r4 to r11)  \nsb and SB (static base, r9)  \nip and IP (intra-procedure-call scratch register, r12)  \nsp and SP (stack pointer, r13)  \nlr and LR (link register, r14)  \npc and PC (program counter, r15)\n\n***\n\n1. r0-r3用作传入函数参数，传出函数返回值。在子程序调用之间，可以将 r0-r3 用于任何用途。被调用函数在返回之前不必恢复 r0-r3。如果调用函数需要再次使用 r0-r3 的内容，则它必须保留这些内容。  \n2. r4-r11被用来存放函数的局部变量。如果被调用函数使用了这些寄存器，它在返回之前必须恢复这些寄存器的值。  \n3. r12是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。  \n4. r13是栈指针 sp。它不能用于任何其它用途。sp 中存放的值在退出被调用函数时必须与进入时的值相同。  \n5. r14是链接寄存器 lr。如果您保存了返回地址，则可以在调用之间将 r14 用于其它用途，程序返回时要恢复。  \n6. r15是程序计数器 PC。它不能用于任何其它用途。\n\n###### 注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\n\n原文出处：  \nhttps://blog.csdn.net/wh8_2011/article/details/53195320  \nhttps://blog.csdn.net/Decisiveness/article/details/44106197","source":"_posts/ARM内部处理寄存器.md","raw":"title: ARM处理器内部寄存器\ndate: 2019-10-14 07:26:11\ntags:\nauthor:\n---\n\nARM处理器内部寄存器作用\n===\n\n![](/images/arm1.png)\n\n\n***\n\nr0-r15 and R0-R15  \na1-a4 (argument, result, or scratch registers, synonyms for r0 to r3)  \nv1-v8 (variable registers, r4 to r11)  \nsb and SB (static base, r9)  \nip and IP (intra-procedure-call scratch register, r12)  \nsp and SP (stack pointer, r13)  \nlr and LR (link register, r14)  \npc and PC (program counter, r15)\n\n***\n\n1. r0-r3用作传入函数参数，传出函数返回值。在子程序调用之间，可以将 r0-r3 用于任何用途。被调用函数在返回之前不必恢复 r0-r3。如果调用函数需要再次使用 r0-r3 的内容，则它必须保留这些内容。  \n2. r4-r11被用来存放函数的局部变量。如果被调用函数使用了这些寄存器，它在返回之前必须恢复这些寄存器的值。  \n3. r12是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。  \n4. r13是栈指针 sp。它不能用于任何其它用途。sp 中存放的值在退出被调用函数时必须与进入时的值相同。  \n5. r14是链接寄存器 lr。如果您保存了返回地址，则可以在调用之间将 r14 用于其它用途，程序返回时要恢复。  \n6. r15是程序计数器 PC。它不能用于任何其它用途。\n\n###### 注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\n\n原文出处：  \nhttps://blog.csdn.net/wh8_2011/article/details/53195320  \nhttps://blog.csdn.net/Decisiveness/article/details/44106197","slug":"ARM内部处理寄存器","published":1,"updated":"2019-10-13T23:49:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1s8spna0000h9m0317a5tf7","content":"<h1 id=\"ARM处理器内部寄存器作用\"><a href=\"#ARM处理器内部寄存器作用\" class=\"headerlink\" title=\"ARM处理器内部寄存器作用\"></a>ARM处理器内部寄存器作用</h1><p><img src=\"/images/arm1.png\" alt=\"\"></p>\n<hr>\n<p>r0-r15 and R0-R15<br>a1-a4 (argument, result, or scratch registers, synonyms for r0 to r3)<br>v1-v8 (variable registers, r4 to r11)<br>sb and SB (static base, r9)<br>ip and IP (intra-procedure-call scratch register, r12)<br>sp and SP (stack pointer, r13)<br>lr and LR (link register, r14)<br>pc and PC (program counter, r15)</p>\n<hr>\n<ol>\n<li>r0-r3用作传入函数参数，传出函数返回值。在子程序调用之间，可以将 r0-r3 用于任何用途。被调用函数在返回之前不必恢复 r0-r3。如果调用函数需要再次使用 r0-r3 的内容，则它必须保留这些内容。  </li>\n<li>r4-r11被用来存放函数的局部变量。如果被调用函数使用了这些寄存器，它在返回之前必须恢复这些寄存器的值。  </li>\n<li>r12是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。  </li>\n<li>r13是栈指针 sp。它不能用于任何其它用途。sp 中存放的值在退出被调用函数时必须与进入时的值相同。  </li>\n<li>r14是链接寄存器 lr。如果您保存了返回地址，则可以在调用之间将 r14 用于其它用途，程序返回时要恢复。  </li>\n<li>r15是程序计数器 PC。它不能用于任何其它用途。</li>\n</ol>\n<h6 id=\"注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\"><a href=\"#注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\" class=\"headerlink\" title=\"注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\"></a>注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11</h6><p>原文出处：<br><a href=\"https://blog.csdn.net/wh8_2011/article/details/53195320\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wh8_2011/article/details/53195320</a><br><a href=\"https://blog.csdn.net/Decisiveness/article/details/44106197\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Decisiveness/article/details/44106197</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ARM处理器内部寄存器作用\"><a href=\"#ARM处理器内部寄存器作用\" class=\"headerlink\" title=\"ARM处理器内部寄存器作用\"></a>ARM处理器内部寄存器作用</h1><p><img src=\"/images/arm1.png\" alt=\"\"></p>\n<hr>\n<p>r0-r15 and R0-R15<br>a1-a4 (argument, result, or scratch registers, synonyms for r0 to r3)<br>v1-v8 (variable registers, r4 to r11)<br>sb and SB (static base, r9)<br>ip and IP (intra-procedure-call scratch register, r12)<br>sp and SP (stack pointer, r13)<br>lr and LR (link register, r14)<br>pc and PC (program counter, r15)</p>\n<hr>\n<ol>\n<li>r0-r3用作传入函数参数，传出函数返回值。在子程序调用之间，可以将 r0-r3 用于任何用途。被调用函数在返回之前不必恢复 r0-r3。如果调用函数需要再次使用 r0-r3 的内容，则它必须保留这些内容。  </li>\n<li>r4-r11被用来存放函数的局部变量。如果被调用函数使用了这些寄存器，它在返回之前必须恢复这些寄存器的值。  </li>\n<li>r12是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。  </li>\n<li>r13是栈指针 sp。它不能用于任何其它用途。sp 中存放的值在退出被调用函数时必须与进入时的值相同。  </li>\n<li>r14是链接寄存器 lr。如果您保存了返回地址，则可以在调用之间将 r14 用于其它用途，程序返回时要恢复。  </li>\n<li>r15是程序计数器 PC。它不能用于任何其它用途。</li>\n</ol>\n<h6 id=\"注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\"><a href=\"#注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\" class=\"headerlink\" title=\"注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11\"></a>注意：在中断程序中，所有的寄存器都必须保护，编译器会自动保护R4～R11</h6><p>原文出处：<br><a href=\"https://blog.csdn.net/wh8_2011/article/details/53195320\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wh8_2011/article/details/53195320</a><br><a href=\"https://blog.csdn.net/Decisiveness/article/details/44106197\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Decisiveness/article/details/44106197</a></p>\n"},{"title":"RK3399内核编译以安装docker","author":"schrock000","date":"2019-10-15T19:14:00.000Z","_content":"环境：  \n1、firefly-rk3399开发板  \n2、ubuntu18.04 官方镜像  \n3、内核版本 4.4.154  \n***\n最近想使用Docker的某容器，在RK3399-firefly上安装的时候报错，具体安装过程就网上随意能搜到的，就不提及了。经过查看各种资料之后，成功安装docker，希望能帮到有需要的各位，也顺便记录一下。大致过程如下：\n\n1、 查看docker的状态发现是failed，journalctl -fu docker 查看日志，有driver not support等字样，具体记不清了，这里大致了解了一下是因为docker有那么几种支持的storage-driver， 恰好内核又没打开任何一个支持的FS，所以只好去编译内核了。\n\n2、修改配置   \n进入linux-sdk/kernel目录下，获取https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh脚本查看docker需要的设置是否打开，其他的都是enable，我仅放出storage-driver的配置，主要是要打开overlay的FS.\n```\n- Storage Drivers:\n  - \"aufs\":\n    - CONFIG_AUFS_FS: missing\n  - \"btrfs\":\n    - CONFIG_BTRFS_FS: missing\n    - CONFIG_BTRFS_FS_POSIX_ACL: missing\n  - \"devicemapper\":\n    - CONFIG_BLK_DEV_DM: enabled\n    - CONFIG_DM_THIN_PROVISIONING: enabled\n  - \"overlay\":\n    - CONFIG_OVERLAY_FS: enabled\n  - \"zfs\":\n    - /dev/zfs: missing\n    - zfs command: missing\n    - zpool command: missing\n```\n***\n3、\n之前的配置都是通过make menuconfig配置的，具体怎么操作网上找，挺多的。\n进入linux-sdk/kernel/目录，make ARCH=arm64 rk3399-firefly-linux.img -j8 编译生成boot.img后烧录到开发板。\n上电发现docker仍报错，修改配置文件内容（没有就新建），/etc/docker/daemon.json， 内容如下：\n```\n{\n    \"registry-mirrors\": [\"aliyun加速地址\"],\n    \"storage-driver\": \"overlay\"\n}\n```\n***\n上面的阿里云加速地址换成自己的，这里主要是为了pull容器的时候舒服一点，教程可以在网上搜到很多，保存。\n重启服务：systemctl daemon-reload && systemctl restart docker  \n还是无法正常运行，继续查看日志，发现报错已经变更了，这时候提示的是iptables does not exist 等字样的信息，其实就是说iptables内核模块没有，配置完编译新内核上传。加入以下模块，基本都在networking support->networking options中，我也记不太清了，各位自己查找一下吧。。。。\n\n***\nNetfilter connection tracking support\nNetbios name service protocal support(new)\nNetfilter Xtables support (required for ip_tables)\n\nIP: Netfilter Configuration\nIPv4 connection tracking support (require for NAT)\nIP tables support (required for filtering/masq/NAT)\n\n什么 NAT的选项，忘了\nMASQUERADE target support\nREDIRECT target support\n\n按上面步骤重新编译并烧录到开发板，这次上电，docker绿了，开心。\n操作了一下，正常\n```\nsudo docker run ubuntu:18.04 /bin/echo \"Hello world\"\n\nStatus: Downloaded newer image for ubuntu:18.04  \nHello world\n```\n***\n","source":"_posts/RK3399内核编译以安装docker.md","raw":"title: RK3399内核编译以安装docker\ntags: []\nauthor: schrock000\ncategories:\n  - ARM_Linux\ndate: 2019-10-16 03:14:00\n---\n环境：  \n1、firefly-rk3399开发板  \n2、ubuntu18.04 官方镜像  \n3、内核版本 4.4.154  \n***\n最近想使用Docker的某容器，在RK3399-firefly上安装的时候报错，具体安装过程就网上随意能搜到的，就不提及了。经过查看各种资料之后，成功安装docker，希望能帮到有需要的各位，也顺便记录一下。大致过程如下：\n\n1、 查看docker的状态发现是failed，journalctl -fu docker 查看日志，有driver not support等字样，具体记不清了，这里大致了解了一下是因为docker有那么几种支持的storage-driver， 恰好内核又没打开任何一个支持的FS，所以只好去编译内核了。\n\n2、修改配置   \n进入linux-sdk/kernel目录下，获取https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh脚本查看docker需要的设置是否打开，其他的都是enable，我仅放出storage-driver的配置，主要是要打开overlay的FS.\n```\n- Storage Drivers:\n  - \"aufs\":\n    - CONFIG_AUFS_FS: missing\n  - \"btrfs\":\n    - CONFIG_BTRFS_FS: missing\n    - CONFIG_BTRFS_FS_POSIX_ACL: missing\n  - \"devicemapper\":\n    - CONFIG_BLK_DEV_DM: enabled\n    - CONFIG_DM_THIN_PROVISIONING: enabled\n  - \"overlay\":\n    - CONFIG_OVERLAY_FS: enabled\n  - \"zfs\":\n    - /dev/zfs: missing\n    - zfs command: missing\n    - zpool command: missing\n```\n***\n3、\n之前的配置都是通过make menuconfig配置的，具体怎么操作网上找，挺多的。\n进入linux-sdk/kernel/目录，make ARCH=arm64 rk3399-firefly-linux.img -j8 编译生成boot.img后烧录到开发板。\n上电发现docker仍报错，修改配置文件内容（没有就新建），/etc/docker/daemon.json， 内容如下：\n```\n{\n    \"registry-mirrors\": [\"aliyun加速地址\"],\n    \"storage-driver\": \"overlay\"\n}\n```\n***\n上面的阿里云加速地址换成自己的，这里主要是为了pull容器的时候舒服一点，教程可以在网上搜到很多，保存。\n重启服务：systemctl daemon-reload && systemctl restart docker  \n还是无法正常运行，继续查看日志，发现报错已经变更了，这时候提示的是iptables does not exist 等字样的信息，其实就是说iptables内核模块没有，配置完编译新内核上传。加入以下模块，基本都在networking support->networking options中，我也记不太清了，各位自己查找一下吧。。。。\n\n***\nNetfilter connection tracking support\nNetbios name service protocal support(new)\nNetfilter Xtables support (required for ip_tables)\n\nIP: Netfilter Configuration\nIPv4 connection tracking support (require for NAT)\nIP tables support (required for filtering/masq/NAT)\n\n什么 NAT的选项，忘了\nMASQUERADE target support\nREDIRECT target support\n\n按上面步骤重新编译并烧录到开发板，这次上电，docker绿了，开心。\n操作了一下，正常\n```\nsudo docker run ubuntu:18.04 /bin/echo \"Hello world\"\n\nStatus: Downloaded newer image for ubuntu:18.04  \nHello world\n```\n***\n","slug":"RK3399内核编译以安装docker","published":1,"updated":"2019-10-15T19:22:35.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1s8spng0001h9m0ar1aphma","content":"<p>环境：<br>1、firefly-rk3399开发板<br>2、ubuntu18.04 官方镜像<br>3、内核版本 4.4.154  </p>\n<hr>\n<p>最近想使用Docker的某容器，在RK3399-firefly上安装的时候报错，具体安装过程就网上随意能搜到的，就不提及了。经过查看各种资料之后，成功安装docker，希望能帮到有需要的各位，也顺便记录一下。大致过程如下：</p>\n<p>1、 查看docker的状态发现是failed，journalctl -fu docker 查看日志，有driver not support等字样，具体记不清了，这里大致了解了一下是因为docker有那么几种支持的storage-driver， 恰好内核又没打开任何一个支持的FS，所以只好去编译内核了。</p>\n<p>2、修改配置<br>进入linux-sdk/kernel目录下，获取<a href=\"https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh脚本查看docker需要的设置是否打开，其他的都是enable，我仅放出storage-driver的配置，主要是要打开overlay的FS\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh脚本查看docker需要的设置是否打开，其他的都是enable，我仅放出storage-driver的配置，主要是要打开overlay的FS</a>.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Storage Drivers:</span><br><span class=\"line\">  - &quot;aufs&quot;:</span><br><span class=\"line\">    - CONFIG_AUFS_FS: missing</span><br><span class=\"line\">  - &quot;btrfs&quot;:</span><br><span class=\"line\">    - CONFIG_BTRFS_FS: missing</span><br><span class=\"line\">    - CONFIG_BTRFS_FS_POSIX_ACL: missing</span><br><span class=\"line\">  - &quot;devicemapper&quot;:</span><br><span class=\"line\">    - CONFIG_BLK_DEV_DM: enabled</span><br><span class=\"line\">    - CONFIG_DM_THIN_PROVISIONING: enabled</span><br><span class=\"line\">  - &quot;overlay&quot;:</span><br><span class=\"line\">    - CONFIG_OVERLAY_FS: enabled</span><br><span class=\"line\">  - &quot;zfs&quot;:</span><br><span class=\"line\">    - /dev/zfs: missing</span><br><span class=\"line\">    - zfs command: missing</span><br><span class=\"line\">    - zpool command: missing</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>3、<br>之前的配置都是通过make menuconfig配置的，具体怎么操作网上找，挺多的。<br>进入linux-sdk/kernel/目录，make ARCH=arm64 rk3399-firefly-linux.img -j8 编译生成boot.img后烧录到开发板。<br>上电发现docker仍报错，修改配置文件内容（没有就新建），/etc/docker/daemon.json， 内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;aliyun加速地址&quot;],</span><br><span class=\"line\">    &quot;storage-driver&quot;: &quot;overlay&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>上面的阿里云加速地址换成自己的，这里主要是为了pull容器的时候舒服一点，教程可以在网上搜到很多，保存。<br>重启服务：systemctl daemon-reload &amp;&amp; systemctl restart docker<br>还是无法正常运行，继续查看日志，发现报错已经变更了，这时候提示的是iptables does not exist 等字样的信息，其实就是说iptables内核模块没有，配置完编译新内核上传。加入以下模块，基本都在networking support-&gt;networking options中，我也记不太清了，各位自己查找一下吧。。。。</p>\n<hr>\n<p>Netfilter connection tracking support<br>Netbios name service protocal support(new)<br>Netfilter Xtables support (required for ip_tables)</p>\n<p>IP: Netfilter Configuration<br>IPv4 connection tracking support (require for NAT)<br>IP tables support (required for filtering/masq/NAT)</p>\n<p>什么 NAT的选项，忘了<br>MASQUERADE target support<br>REDIRECT target support</p>\n<p>按上面步骤重新编译并烧录到开发板，这次上电，docker绿了，开心。<br>操作了一下，正常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run ubuntu:18.04 /bin/echo &quot;Hello world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:18.04  </span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>环境：<br>1、firefly-rk3399开发板<br>2、ubuntu18.04 官方镜像<br>3、内核版本 4.4.154  </p>\n<hr>\n<p>最近想使用Docker的某容器，在RK3399-firefly上安装的时候报错，具体安装过程就网上随意能搜到的，就不提及了。经过查看各种资料之后，成功安装docker，希望能帮到有需要的各位，也顺便记录一下。大致过程如下：</p>\n<p>1、 查看docker的状态发现是failed，journalctl -fu docker 查看日志，有driver not support等字样，具体记不清了，这里大致了解了一下是因为docker有那么几种支持的storage-driver， 恰好内核又没打开任何一个支持的FS，所以只好去编译内核了。</p>\n<p>2、修改配置<br>进入linux-sdk/kernel目录下，获取<a href=\"https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh脚本查看docker需要的设置是否打开，其他的都是enable，我仅放出storage-driver的配置，主要是要打开overlay的FS\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh脚本查看docker需要的设置是否打开，其他的都是enable，我仅放出storage-driver的配置，主要是要打开overlay的FS</a>.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Storage Drivers:</span><br><span class=\"line\">  - &quot;aufs&quot;:</span><br><span class=\"line\">    - CONFIG_AUFS_FS: missing</span><br><span class=\"line\">  - &quot;btrfs&quot;:</span><br><span class=\"line\">    - CONFIG_BTRFS_FS: missing</span><br><span class=\"line\">    - CONFIG_BTRFS_FS_POSIX_ACL: missing</span><br><span class=\"line\">  - &quot;devicemapper&quot;:</span><br><span class=\"line\">    - CONFIG_BLK_DEV_DM: enabled</span><br><span class=\"line\">    - CONFIG_DM_THIN_PROVISIONING: enabled</span><br><span class=\"line\">  - &quot;overlay&quot;:</span><br><span class=\"line\">    - CONFIG_OVERLAY_FS: enabled</span><br><span class=\"line\">  - &quot;zfs&quot;:</span><br><span class=\"line\">    - /dev/zfs: missing</span><br><span class=\"line\">    - zfs command: missing</span><br><span class=\"line\">    - zpool command: missing</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>3、<br>之前的配置都是通过make menuconfig配置的，具体怎么操作网上找，挺多的。<br>进入linux-sdk/kernel/目录，make ARCH=arm64 rk3399-firefly-linux.img -j8 编译生成boot.img后烧录到开发板。<br>上电发现docker仍报错，修改配置文件内容（没有就新建），/etc/docker/daemon.json， 内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;aliyun加速地址&quot;],</span><br><span class=\"line\">    &quot;storage-driver&quot;: &quot;overlay&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>上面的阿里云加速地址换成自己的，这里主要是为了pull容器的时候舒服一点，教程可以在网上搜到很多，保存。<br>重启服务：systemctl daemon-reload &amp;&amp; systemctl restart docker<br>还是无法正常运行，继续查看日志，发现报错已经变更了，这时候提示的是iptables does not exist 等字样的信息，其实就是说iptables内核模块没有，配置完编译新内核上传。加入以下模块，基本都在networking support-&gt;networking options中，我也记不太清了，各位自己查找一下吧。。。。</p>\n<hr>\n<p>Netfilter connection tracking support<br>Netbios name service protocal support(new)<br>Netfilter Xtables support (required for ip_tables)</p>\n<p>IP: Netfilter Configuration<br>IPv4 connection tracking support (require for NAT)<br>IP tables support (required for filtering/masq/NAT)</p>\n<p>什么 NAT的选项，忘了<br>MASQUERADE target support<br>REDIRECT target support</p>\n<p>按上面步骤重新编译并烧录到开发板，这次上电，docker绿了，开心。<br>操作了一下，正常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run ubuntu:18.04 /bin/echo &quot;Hello world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Status: Downloaded newer image for ubuntu:18.04  </span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure></p>\n<hr>\n"},{"title":"Hello World","date":"2019-01-01T02:22:00.000Z","author":null,"_content":"# Hello World\n\n```bash\n$ Hello World\n```\n","source":"_posts/Hello-World.md","raw":"title: Hello World\ntags: []\ncategories: []\ndate: 2019-01-01 10:22:00\nauthor:\n---\n# Hello World\n\n```bash\n$ Hello World\n```\n","slug":"Hello-World","published":1,"updated":"2019-01-01T02:37:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1s8spni0002h9m0jft5burb","content":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ Hello World</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ Hello World</span><br></pre></td></tr></table></figure>\n"},{"title":"Use GCC to build STM32 projects","date":"2019-02-01T07:31:00.000Z","author":null,"_content":"最近突然想建立一个利用makefile编译的STM32工程模板，记录一下辛酸的过程。。。\n\n   其实Makefile虽然我不是很熟，但是写一个简单的makefile还是OK的，所以在makefile阶段并没有遇到什么奇怪的问题，注意好makefile的规则就排除了，比如有时候没注意看TAB之类的，然后就是文件的路径。\n   \n   在make的过程中出现以下报错信息。\n   ```\n/tmp/cc6kleCZ.s: Assembler messages:\n/tmp/cc6kleCZ.s:488: Error: registers may not be the same -- `strexb r0,r0,[r1]'\n/tmp/cc6kleCZ.s:512: Error: registers may not be the same -- `strexh r0,r0,[r1]'\nmakefile:60: recipe for target 'core/CM3/core_cm3.o' failed\nmake: *** [core/CM3/core_cm3.o] Error 1\n   ```\n   作为一个菜鸡，看到Assembler 之类的error是比较慌的，但是还是不能畏惧的，正面刚。打开了core_cm3.c，找到了与它相关的函数，google后发现github上有人解决了，于是看了一下分析，做出了修改。然后成功编译过这一步。\n   ```\n   uint32_t __STREXB(uint8_t value, uint8_t *addr)\n{\n   uint32_t result=0;\n\n   //__ASM volatile (\"strexb %0, %2, [%1]\" : \"=r\" (result) : \"r\" (addr), \"r\" (value) );\n   __ASM volatile (\"strexb %0, %2, [%1]\" : \"=&r\" (result) : \"r\" (addr), \"r\" (value) );\n\n   return(result);\n\n}\n  ```\n  \n  ```\n  uint32_t __STREXH(uint16_t value, uint16_t *addr)\n{\n   uint32_t result=0;\n\n   //__ASM volatile (\"strexh %0, %2, [%1]\" : \"=r\" (result) : \"r\" (addr), \"r\" (value) );\n   __ASM volatile (\"strexh %0, %2, [%1]\" : \"=&r\" (result) : \"r\" (addr), \"r\" (value) );\n\n   return(result);\n\n}\n  ```\n  然后还有一个问题就是GCC编译一个文件时出现\n  ```\n  error: expected '(' before 'void'\n __asm void MSR_MSP(u32 addr)\n  ```\n  之类的报错，这个打开源文件后发现其实是GCC在C语言内嵌汇编需要注意的一个地方，修改为如下即可。\n  ```\n  void MSR_MSP(u32 addr)\n{\n\t__ASM volatile(\"MSR MSP, r0\");\n\t__ASM volatile(\"BX r14\");\n    \n}\n  ```\n  还有要注意的就是，在stm32 标准固件库内，CORE的startup中有多个文件夹，Keil使用的启动文件在arm文件夹内，这和使用GCC时是不一样的，GCC下应该使用gcc_ride7中的启动文件,TrueSTUDIO是官方的IDE软件，其使用的也是GCC所以也可以使用其中的。然后就是链接文件(.ld)，可以使用stm32标准固件库文件夹下/Project/STM32F10x_StdPeriph_Template/TrueSTUDIO/中的链接文件。\n  \n  然后成功make出了 hex bin elf等文件，download到stm32后也是正常的。","source":"_posts/Use-GCC-to-build-STM32-projects.md","raw":"title: Use GCC to build STM32 projects\ntags: []\ncategories: []\ndate: 2019-02-01 15:31:00\nauthor:\n---\n最近突然想建立一个利用makefile编译的STM32工程模板，记录一下辛酸的过程。。。\n\n   其实Makefile虽然我不是很熟，但是写一个简单的makefile还是OK的，所以在makefile阶段并没有遇到什么奇怪的问题，注意好makefile的规则就排除了，比如有时候没注意看TAB之类的，然后就是文件的路径。\n   \n   在make的过程中出现以下报错信息。\n   ```\n/tmp/cc6kleCZ.s: Assembler messages:\n/tmp/cc6kleCZ.s:488: Error: registers may not be the same -- `strexb r0,r0,[r1]'\n/tmp/cc6kleCZ.s:512: Error: registers may not be the same -- `strexh r0,r0,[r1]'\nmakefile:60: recipe for target 'core/CM3/core_cm3.o' failed\nmake: *** [core/CM3/core_cm3.o] Error 1\n   ```\n   作为一个菜鸡，看到Assembler 之类的error是比较慌的，但是还是不能畏惧的，正面刚。打开了core_cm3.c，找到了与它相关的函数，google后发现github上有人解决了，于是看了一下分析，做出了修改。然后成功编译过这一步。\n   ```\n   uint32_t __STREXB(uint8_t value, uint8_t *addr)\n{\n   uint32_t result=0;\n\n   //__ASM volatile (\"strexb %0, %2, [%1]\" : \"=r\" (result) : \"r\" (addr), \"r\" (value) );\n   __ASM volatile (\"strexb %0, %2, [%1]\" : \"=&r\" (result) : \"r\" (addr), \"r\" (value) );\n\n   return(result);\n\n}\n  ```\n  \n  ```\n  uint32_t __STREXH(uint16_t value, uint16_t *addr)\n{\n   uint32_t result=0;\n\n   //__ASM volatile (\"strexh %0, %2, [%1]\" : \"=r\" (result) : \"r\" (addr), \"r\" (value) );\n   __ASM volatile (\"strexh %0, %2, [%1]\" : \"=&r\" (result) : \"r\" (addr), \"r\" (value) );\n\n   return(result);\n\n}\n  ```\n  然后还有一个问题就是GCC编译一个文件时出现\n  ```\n  error: expected '(' before 'void'\n __asm void MSR_MSP(u32 addr)\n  ```\n  之类的报错，这个打开源文件后发现其实是GCC在C语言内嵌汇编需要注意的一个地方，修改为如下即可。\n  ```\n  void MSR_MSP(u32 addr)\n{\n\t__ASM volatile(\"MSR MSP, r0\");\n\t__ASM volatile(\"BX r14\");\n    \n}\n  ```\n  还有要注意的就是，在stm32 标准固件库内，CORE的startup中有多个文件夹，Keil使用的启动文件在arm文件夹内，这和使用GCC时是不一样的，GCC下应该使用gcc_ride7中的启动文件,TrueSTUDIO是官方的IDE软件，其使用的也是GCC所以也可以使用其中的。然后就是链接文件(.ld)，可以使用stm32标准固件库文件夹下/Project/STM32F10x_StdPeriph_Template/TrueSTUDIO/中的链接文件。\n  \n  然后成功make出了 hex bin elf等文件，download到stm32后也是正常的。","slug":"Use-GCC-to-build-STM32-projects","published":1,"updated":"2019-02-01T21:02:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1s8spnm0004h9m020k7ztjm","content":"<p>最近突然想建立一个利用makefile编译的STM32工程模板，记录一下辛酸的过程。。。</p>\n<p>   其实Makefile虽然我不是很熟，但是写一个简单的makefile还是OK的，所以在makefile阶段并没有遇到什么奇怪的问题，注意好makefile的规则就排除了，比如有时候没注意看TAB之类的，然后就是文件的路径。</p>\n<p>   在make的过程中出现以下报错信息。<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp/cc6kleCZ.s: Assembler messages:</span><br><span class=\"line\">/tmp/cc6kleCZ.s:488: Error: registers may not be the same -- `strexb r0,r0,[r1]&apos;</span><br><span class=\"line\">/tmp/cc6kleCZ.s:512: Error: registers may not be the same -- `strexh r0,r0,[r1]&apos;</span><br><span class=\"line\">makefile:60: recipe for target &apos;core/CM3/core_cm3.o&apos; failed</span><br><span class=\"line\">make: *** [core/CM3/core_cm3.o] Error 1</span><br></pre></td></tr></table></figure></p>\n<p>   作为一个菜鸡，看到Assembler 之类的error是比较慌的，但是还是不能畏惧的，正面刚。打开了core_cm3.c，找到了与它相关的函数，google后发现github上有人解决了，于是看了一下分析，做出了修改。然后成功编译过这一步。<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   uint32_t __STREXB(uint8_t value, uint8_t *addr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   uint32_t result=0;</span><br><span class=\"line\"></span><br><span class=\"line\">   //__ASM volatile (&quot;strexb %0, %2, [%1]&quot; : &quot;=r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\">   __ASM volatile (&quot;strexb %0, %2, [%1]&quot; : &quot;=&amp;r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\"></span><br><span class=\"line\">   return(result);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  uint32_t __STREXH(uint16_t value, uint16_t *addr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   uint32_t result=0;</span><br><span class=\"line\"></span><br><span class=\"line\">   //__ASM volatile (&quot;strexh %0, %2, [%1]&quot; : &quot;=r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\">   __ASM volatile (&quot;strexh %0, %2, [%1]&quot; : &quot;=&amp;r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\"></span><br><span class=\"line\">   return(result);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  然后还有一个问题就是GCC编译一个文件时出现<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> error: expected &apos;(&apos; before &apos;void&apos;</span><br><span class=\"line\">__asm void MSR_MSP(u32 addr)</span><br></pre></td></tr></table></figure></p>\n<p>  之类的报错，这个打开源文件后发现其实是GCC在C语言内嵌汇编需要注意的一个地方，修改为如下即可。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  void MSR_MSP(u32 addr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__ASM volatile(&quot;MSR MSP, r0&quot;);</span><br><span class=\"line\">\t__ASM volatile(&quot;BX r14&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  还有要注意的就是，在stm32 标准固件库内，CORE的startup中有多个文件夹，Keil使用的启动文件在arm文件夹内，这和使用GCC时是不一样的，GCC下应该使用gcc_ride7中的启动文件,TrueSTUDIO是官方的IDE软件，其使用的也是GCC所以也可以使用其中的。然后就是链接文件(.ld)，可以使用stm32标准固件库文件夹下/Project/STM32F10x_StdPeriph_Template/TrueSTUDIO/中的链接文件。</p>\n<p>  然后成功make出了 hex bin elf等文件，download到stm32后也是正常的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近突然想建立一个利用makefile编译的STM32工程模板，记录一下辛酸的过程。。。</p>\n<p>   其实Makefile虽然我不是很熟，但是写一个简单的makefile还是OK的，所以在makefile阶段并没有遇到什么奇怪的问题，注意好makefile的规则就排除了，比如有时候没注意看TAB之类的，然后就是文件的路径。</p>\n<p>   在make的过程中出现以下报错信息。<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp/cc6kleCZ.s: Assembler messages:</span><br><span class=\"line\">/tmp/cc6kleCZ.s:488: Error: registers may not be the same -- `strexb r0,r0,[r1]&apos;</span><br><span class=\"line\">/tmp/cc6kleCZ.s:512: Error: registers may not be the same -- `strexh r0,r0,[r1]&apos;</span><br><span class=\"line\">makefile:60: recipe for target &apos;core/CM3/core_cm3.o&apos; failed</span><br><span class=\"line\">make: *** [core/CM3/core_cm3.o] Error 1</span><br></pre></td></tr></table></figure></p>\n<p>   作为一个菜鸡，看到Assembler 之类的error是比较慌的，但是还是不能畏惧的，正面刚。打开了core_cm3.c，找到了与它相关的函数，google后发现github上有人解决了，于是看了一下分析，做出了修改。然后成功编译过这一步。<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   uint32_t __STREXB(uint8_t value, uint8_t *addr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   uint32_t result=0;</span><br><span class=\"line\"></span><br><span class=\"line\">   //__ASM volatile (&quot;strexb %0, %2, [%1]&quot; : &quot;=r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\">   __ASM volatile (&quot;strexb %0, %2, [%1]&quot; : &quot;=&amp;r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\"></span><br><span class=\"line\">   return(result);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  uint32_t __STREXH(uint16_t value, uint16_t *addr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   uint32_t result=0;</span><br><span class=\"line\"></span><br><span class=\"line\">   //__ASM volatile (&quot;strexh %0, %2, [%1]&quot; : &quot;=r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\">   __ASM volatile (&quot;strexh %0, %2, [%1]&quot; : &quot;=&amp;r&quot; (result) : &quot;r&quot; (addr), &quot;r&quot; (value) );</span><br><span class=\"line\"></span><br><span class=\"line\">   return(result);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  然后还有一个问题就是GCC编译一个文件时出现<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> error: expected &apos;(&apos; before &apos;void&apos;</span><br><span class=\"line\">__asm void MSR_MSP(u32 addr)</span><br></pre></td></tr></table></figure></p>\n<p>  之类的报错，这个打开源文件后发现其实是GCC在C语言内嵌汇编需要注意的一个地方，修改为如下即可。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  void MSR_MSP(u32 addr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__ASM volatile(&quot;MSR MSP, r0&quot;);</span><br><span class=\"line\">\t__ASM volatile(&quot;BX r14&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  还有要注意的就是，在stm32 标准固件库内，CORE的startup中有多个文件夹，Keil使用的启动文件在arm文件夹内，这和使用GCC时是不一样的，GCC下应该使用gcc_ride7中的启动文件,TrueSTUDIO是官方的IDE软件，其使用的也是GCC所以也可以使用其中的。然后就是链接文件(.ld)，可以使用stm32标准固件库文件夹下/Project/STM32F10x_StdPeriph_Template/TrueSTUDIO/中的链接文件。</p>\n<p>  然后成功make出了 hex bin elf等文件，download到stm32后也是正常的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1s8spng0001h9m0ar1aphma","category_id":"ck1s8spnk0003h9m086l5688u","_id":"ck1s8spnp0005h9m03a0oer4k"}],"PostTag":[],"Tag":[]}}